---
description: 
globs: 
alwaysApply: true
---
# Git ブランチ戦略

## 1. メインブランチ構成

```
main (本番環境)
  ↑
develop (開発環境)
```

### 各ブランチの役割

- `main`: 本番環境用のブランチ。安定したコードのみがマージされる
- `develop`: 開発用のメインブランチ。機能開発の統合先

## 2. 機能開発ブランチ

```
develop
  ↑
feature/header-component
  ↑
feature/3d-scene
```

### 命名規則

- 機能開発: `feature/機能名`
- バグ修正: `fix/バグの説明`
- ホットフィックス: `hotfix/問題の説明`
- リリース準備: `release/バージョン番号`

## 3. ワークフロー

1. **機能開発の場合**:
   ```
   develop → feature/新機能 → develop
   ```

2. **バグ修正の場合**:
   ```
   develop → fix/バグ修正 → develop
   ```

3. **リリースの場合**:
   ```
   develop → release/1.0.0 → main
   ```

4. **緊急修正の場合**:
   ```
   main → hotfix/緊急修正 → main + develop
   ```

## 4. コミットメッセージ規約

```
<emoji> <subject>

<body>

<footer>
```

### 絵文字の種類と意味
- ✨ `feat`: 新機能
- 🐛 `fix`: バグ修正
- 📝 `docs`: ドキュメントのみの変更
- 💄 `style`: コードの意味に影響を与えない変更（フォーマット、セミコロン追加など）
- ♻️ `refactor`: バグ修正や機能追加を含まないコードの変更
- ✅ `test`: テストの追加・修正
- 🔧 `chore`: ビルドプロセスやツールの変更
- 🚀 `perf`: パフォーマンスの改善
- 🔒 `security`: セキュリティ関連の修正
- 🎨 `art`: コードの構造/フォーマットの改善
- 🚨 `ci`: CIの設定変更
- 🏗️ `build`: ビルドシステムや外部依存関係の変更
- 📦 `package`: パッケージの追加・削除・更新
- 🔥 `remove`: ファイルやコードの削除
- 🚧 `wip`: 作業途中のコミット

### 使用例
```
✨ ヘッダーコンポーネントの実装

- ナビゲーションメニューの追加
- レスポンシブ対応
- ダークモード対応

Closes #123
```

```
🐛 ログイン時のバグ修正

- パスワード検証ロジックの修正
- エラーメッセージの改善

Fixes #456
```

```
📝 READMEの更新

- インストール手順の追加
- 環境設定の説明を追加
```

## 5. 保護ルール

1. **main ブランチ**:
   - 直接のプッシュ禁止
   - プルリクエスト必須
   - レビュー必須（最低1名）
   - 自動テストの成功必須

2. **develop ブランチ**:
   - 直接のプッシュ禁止
   - プルリクエスト推奨

## 6. リリースプロセス

1. `develop` から `release/1.0.0` ブランチを作成
2. リリース用の調整（バージョン番号更新など）
3. 問題なければ `main` にマージ
4. タグ付け（`v1.0.0`）

## 7. バージョニング

セマンティックバージョニング（SemVer）を採用:

```
MAJOR.MINOR.PATCH
```

- `MAJOR`: 後方互換性のない変更
- `MINOR`: 後方互換性のある機能追加
- `PATCH`: 後方互換性のあるバグ修正

## 8. ベストプラクティス

1. **ブランチの作成**:
   - 機能開発は必ず `develop` から分岐
   - ブランチ名は明確で分かりやすいものにする
   - 関連するIssue番号を含める（例: `feature/123-header-component`）

2. **コミット**:
   - 小さな単位でコミット
   - コミットメッセージは具体的に
   - 関連する変更はまとめてコミット

3. **マージ**:
   - コンフリクトは早めに解決
   - マージ前にコードレビューを実施
   - 不要なブランチは削除

4. **リリース**:
   - リリース前に十分なテストを実施
   - リリースノートの作成
   - タグ付けは必ず実施

## 9. よくある問題と解決策

1. **コンフリクトの発生**:
   - 定期的に `develop` を取り込む
   - コンフリクトは早めに解決
   - 必要に応じてチームで相談

2. **ブランチの寿命**:
   - 長期間のブランチは避ける
   - 定期的に `develop` を取り込む
   - 完了したブランチは削除

3. **コミットの粒度**:
   - 小さな単位でコミット
   - 関連する変更はまとめる
   - コミットメッセージは具体的に

